"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { 
  BookOpen, 
  Calculator, 
  FlaskConical, 
  History, 
  Users, 
  SpellCheck, 
  Theater, 
  PenTool, 
  Briefcase, 
  Puzzle, 
  Presentation, 
  MessageSquare, 
  Brain, 
  Trophy,
  Star,
  Clock,
  Target,
  Gamepad2,
  Crown,
  Sparkles,
  Flame,
  Home,
  Settings,
  Award
} from "lucide-react"

interface GameCategory {
  id: string
  name: string
  description: string
  icon: React.ReactNode
  color: string
  games: Game[]
  totalLevels: number
  completedLevels: number
}

export interface Game {
  id: string
  name: string
  description: string
  difficulty: "beginner" | "intermediate" | "advanced" | "expert"
  timeLimit?: number
  multiplayer: boolean
  collaborative: boolean
  xpReward: number
  unlocked: boolean
  completed: boolean
  bestScore?: number
  icon: React.ReactNode
  features: string[]
  emoji: string
}

interface Player {
  id: string
  name: string
  avatar: string
  level: number
  xp: number
  streak: number
}

interface GameSession {
  gameId: string
  players: Player[]
  startTime: Date
  isActive: boolean
}

export function ComprehensiveGameHub() {
  const [selectedCategory, setSelectedCategory] = useState<string>("vocabulary")
  const [selectedGame, setSelectedGame] = useState<Game | null>(null)
  const [activeSession, setActiveSession] = useState<GameSession | null>(null)
  const [gameScore, setGameScore] = useState(0)
  const [gameTime, setGameTime] = useState(0)
  const [clickedElements, setClickedElements] = useState<Set<number>>(new Set())
  const [playerStats, setPlayerStats] = useState({
    level: 12,
    xp: 2450,
    streak: 7,
    totalGamesPlayed: 89,
    achievements: 23,
    name: 'Player',
    avatar: '/placeholder-user.jpg'
  })

  // Load user profile on component mount
  useEffect(() => {
    // In a real app, this would come from your auth context or user profile
    const loadUserProfile = async () => {
      try {
        // Example: const user = await getUserProfile();
        // setPlayerStats(prev => ({
        //   ...prev,
        //   name: user.name,
        //   avatar: user.avatar,
        //   level: user.level,
        //   xp: user.xp,
        //   streak: user.streak,
        //   totalGamesPlayed: user.totalGamesPlayed,
        //   achievements: user.achievements
        // }));
      } catch (error) {
        console.error('Failed to load user profile:', error);
      }
    };
    
    loadUserProfile();
  }, []);

  // Example game categories - replace with your actual game data
  const gameCategories: GameCategory[] = [
    {
      id: 'vocabulary',
      name: 'Vocabulary',
      description: 'Improve your word power',
      icon: <BookOpen className="h-6 w-6" />,
      color: 'bg-blue-500',
      totalLevels: 10,
      completedLevels: 3,
      games: [
        {
          id: 'word-match',
          name: 'Word Match',
          description: 'Match words with their meanings',
          difficulty: 'beginner',
          timeLimit: 60,
          multiplayer: false,
          collaborative: false,
          xpReward: 100,
          unlocked: true,
          completed: false,
          bestScore: 0,
          icon: <SpellCheck className="h-5 w-5" />,
          features: ['Multiple Choice', 'Timed'],
          emoji: '📝'
        }
        // Add more games as needed
      ]
    },
    // Add more categories as needed
  ];

  // Helper function to get difficulty color
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800';
      case 'intermediate': return 'bg-blue-100 text-blue-800';
      case 'advanced': return 'bg-yellow-100 text-yellow-800';
      case 'expert': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Helper function to get difficulty icon
  const getDifficultyIcon = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return '🌱';
      case 'intermediate': return '📘';
      case 'advanced': return '🏆';
      case 'expert': return '🔥';
      default: return '❓';
    }
  };

  // Start a new game
  const startGame = (game: Game) => {
    setSelectedGame(game);
    setGameScore(0);
    setGameTime(0);
    setClickedElements(new Set());
  };

  // Render game modal if a game is selected
  if (selectedGame && !activeSession) {
    return (
      <Card className="max-w-lg mx-auto mt-12">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>{selectedGame.name}</CardTitle>
              <CardDescription>{selectedGame.description}</CardDescription>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => {
                setSelectedGame(null);
                setActiveSession(null);
                setGameScore(0);
                setGameTime(0);
              }}
            >
              ✕
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-2">Game Details</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Difficulty:</span>
                  <Badge className={getDifficultyColor(selectedGame.difficulty)}>
                    {getDifficultyIcon(selectedGame.difficulty)} {selectedGame.difficulty}
                  </Badge>
                </div>
                {selectedGame.timeLimit && (
                  <div className="flex justify-between">
                    <span>Time Limit:</span>
                    <span>{selectedGame.timeLimit}s</span>
                  </div>
                )}
              </div>
            </div>
            <div>
              <h4 className="font-medium mb-2">Game Stats</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Best Score:</span>
                  <span className="font-medium">{selectedGame.bestScore || 'N/A'}</span>
                </div>
                <div className="flex justify-between">
                  <span>XP Reward:</span>
                  <div className="flex items-center gap-1">
                    <Star className="h-4 w-4 text-yellow-500" />
                    <span className="font-medium">{selectedGame.xpReward}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="flex gap-2">
            <Button 
              className="flex-1"
              onClick={() => {
                // Start the game session
                setActiveSession({
                  gameId: selectedGame.id,
                  players: [{
                    id: 'player-1',
                    name: playerStats.name,
                    avatar: playerStats.avatar,
                    level: playerStats.level,
                    xp: playerStats.xp,
                    streak: playerStats.streak
                  }],
                  startTime: new Date(),
                  isActive: true
                });
              }}
            >
              Start Game
            </Button>
            <Button 
              variant="outline"
              className="flex-1"
              onClick={() => setSelectedGame(null)}
            >
              Cancel
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  // Render the main game hub UI
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Game Hub</h1>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Categories</h2>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {gameCategories.map((category) => (
            <Card 
              key={category.id}
              className={`cursor-pointer transition-colors ${
                selectedCategory === category.id ? 'border-primary' : ''
              }`}
              onClick={() => setSelectedCategory(category.id)}
            >
              <CardHeader className="flex flex-row items-center space-x-4">
                <div className={`p-2 rounded-lg ${category.color} text-white`}>
                  {category.icon}
                </div>
                <div>
                  <CardTitle className="text-lg">{category.name}</CardTitle>
                  <CardDescription>{category.games.length} games</CardDescription>
                </div>
              </CardHeader>
            </Card>
          ))}
        </div>
      </div>

      <div>
        <h2 className="text-xl font-semibold mb-4">
          {gameCategories.find(c => c.id === selectedCategory)?.name || 'All'} Games
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {gameCategories
            .find(c => c.id === selectedCategory)
            ?.games.map((game) => (
              <Card key={game.id} className="overflow-hidden">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 bg-primary/10 rounded-lg text-primary">
                        {game.icon}
                      </div>
                      <div>
                        <h3 className="font-semibold text-lg">{game.name}</h3>
                        <p className="text-sm text-muted-foreground">{game.description}</p>
                      </div>
                    </div>
                    <Badge variant="secondary" className="capitalize">
                      {game.difficulty}
                    </Badge>
                  </div>
                  
                  <div className="space-y-3 mt-4">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">XP Reward</span>
                      <div className="flex items-center">
                        <Star className="h-4 w-4 text-yellow-500 mr-1" />
                        <span className="font-medium">{game.xpReward}</span>
                      </div>
                    </div>
                    
                    {game.timeLimit && (
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">Time Limit</span>
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 text-muted-foreground mr-1" />
                          <span>{game.timeLimit}s</span>
                        </div>
                      </div>
                    )}
                    
                    <Button 
                      className="w-full mt-4"
                      onClick={() => startGame(game)}
                    >
                      Play Now
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
        </div>
      </div>
    </div>
  );
}
